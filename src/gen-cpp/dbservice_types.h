/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef dbservice_TYPES_H
#define dbservice_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace dbservice {

typedef std::vector<class Data>  Shard;

class Data;

class ShardContent;

typedef struct _Data__isset {
  _Data__isset() : key(false), value(false) {}
  bool key :1;
  bool value :1;
} _Data__isset;

class Data {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

  Data(const Data&);
  Data& operator=(const Data&);
  Data() : key(), value() {
  }

  virtual ~Data() throw();
  std::string key;
  std::string value;

  _Data__isset __isset;

  void __set_key(const std::string& val);

  void __set_value(const std::string& val);

  bool operator == (const Data & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const Data &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Data & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Data& obj);
};

void swap(Data &a, Data &b);

typedef struct _ShardContent__isset {
  _ShardContent__isset() : data(false) {}
  bool data :1;
} _ShardContent__isset;

class ShardContent {
 public:

  static const char* ascii_fingerprint; // = "006EFB9C0A4E436459CDFDF617590BB4";
  static const uint8_t binary_fingerprint[16]; // = {0x00,0x6E,0xFB,0x9C,0x0A,0x4E,0x43,0x64,0x59,0xCD,0xFD,0xF6,0x17,0x59,0x0B,0xB4};

  ShardContent(const ShardContent&);
  ShardContent& operator=(const ShardContent&);
  ShardContent() {
  }

  virtual ~ShardContent() throw();
  Shard data;

  _ShardContent__isset __isset;

  void __set_data(const Shard& val);

  bool operator == (const ShardContent & rhs) const
  {
    if (!(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const ShardContent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ShardContent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ShardContent& obj);
};

void swap(ShardContent &a, ShardContent &b);

} // namespace

#endif
