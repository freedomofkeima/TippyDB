/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef DBService_H
#define DBService_H

#include <thrift/TDispatchProcessor.h>
#include "dbservice_types.h"

namespace dbservice {

class DBServiceIf {
 public:
  virtual ~DBServiceIf() {}
  virtual void ping() = 0;
  virtual void putData(std::string& _return, const std::string& value) = 0;

  /**
   * putDataForce
   * Write a new data by force (due to partition limitation)
   * 
   * @param value
   * @param remote_region
   * @param remote_node
   */
  virtual void putDataForce(std::string& _return, const std::string& value, const int32_t remote_region, const int32_t remote_node) = 0;
  virtual bool updateData(const Data& d) = 0;

  /**
   * updateSecondaryData
   * Propagate latest data to secondary nodes where region = remote_region && node == remote_node
   * 
   * @param d
   * @param remote_region
   * @param remote_node
   */
  virtual bool updateSecondaryData(const Data& d, const int32_t remote_region, const int32_t remote_node) = 0;
  virtual void getData(std::string& _return, const std::string& sharded_key) = 0;
  virtual bool deleteData(const std::string& sharded_key) = 0;

  /**
   * deleteSecondaryData
   * Remove data from secondary nodes where region = remote_region && node == remote_node
   * 
   * @param sharded_key
   * @param remote_region
   * @param remote_node
   */
  virtual bool deleteSecondaryData(const std::string& sharded_key, const int32_t remote_region, const int32_t remote_node) = 0;

  /**
   * replicateData
   * Replicate a new data from primary to secondary where region = remote_region && node = remote_node
   * 
   * @param d
   * @param remote_region
   * @param remote_node
   */
  virtual bool replicateData(const Data& d, const int32_t remote_region, const int32_t remote_node) = 0;

  /**
   * resyncData
   * Retrieve all newest shard contents where region = remote_region && node = remote_node (choose the nearest one for primary / the smallest db size for secondary)
   * 
   * @param remote_region
   * @param remote_node
   */
  virtual void resyncData(ShardContent& _return, const int32_t remote_region, const int32_t remote_node) = 0;

  /**
   * getRecover
   * Get newest metadata (recovery phase)
   */
  virtual void getRecover(GetRecover& _return) = 0;

  /**
   * sendAppend
   * Send append request -> Update metadata (consensus). On the other hand, lock metadata from other R/W operation
   * 
   * @param request
   */
  virtual void sendAppend(AppendResponse& _return, const AppendRequest& request) = 0;

  /**
   * sendVote
   * Send vote request
   * 
   * @param request
   */
  virtual void sendVote(VoteResponse& _return, const VoteRequest& request) = 0;
  virtual void zip() = 0;
};

class DBServiceIfFactory {
 public:
  typedef DBServiceIf Handler;

  virtual ~DBServiceIfFactory() {}

  virtual DBServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(DBServiceIf* /* handler */) = 0;
};

class DBServiceIfSingletonFactory : virtual public DBServiceIfFactory {
 public:
  DBServiceIfSingletonFactory(const boost::shared_ptr<DBServiceIf>& iface) : iface_(iface) {}
  virtual ~DBServiceIfSingletonFactory() {}

  virtual DBServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(DBServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<DBServiceIf> iface_;
};

class DBServiceNull : virtual public DBServiceIf {
 public:
  virtual ~DBServiceNull() {}
  void ping() {
    return;
  }
  void putData(std::string& /* _return */, const std::string& /* value */) {
    return;
  }
  void putDataForce(std::string& /* _return */, const std::string& /* value */, const int32_t /* remote_region */, const int32_t /* remote_node */) {
    return;
  }
  bool updateData(const Data& /* d */) {
    bool _return = false;
    return _return;
  }
  bool updateSecondaryData(const Data& /* d */, const int32_t /* remote_region */, const int32_t /* remote_node */) {
    bool _return = false;
    return _return;
  }
  void getData(std::string& /* _return */, const std::string& /* sharded_key */) {
    return;
  }
  bool deleteData(const std::string& /* sharded_key */) {
    bool _return = false;
    return _return;
  }
  bool deleteSecondaryData(const std::string& /* sharded_key */, const int32_t /* remote_region */, const int32_t /* remote_node */) {
    bool _return = false;
    return _return;
  }
  bool replicateData(const Data& /* d */, const int32_t /* remote_region */, const int32_t /* remote_node */) {
    bool _return = false;
    return _return;
  }
  void resyncData(ShardContent& /* _return */, const int32_t /* remote_region */, const int32_t /* remote_node */) {
    return;
  }
  void getRecover(GetRecover& /* _return */) {
    return;
  }
  void sendAppend(AppendResponse& /* _return */, const AppendRequest& /* request */) {
    return;
  }
  void sendVote(VoteResponse& /* _return */, const VoteRequest& /* request */) {
    return;
  }
  void zip() {
    return;
  }
};


class DBService_ping_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  DBService_ping_args(const DBService_ping_args&);
  DBService_ping_args& operator=(const DBService_ping_args&);
  DBService_ping_args() {
  }

  virtual ~DBService_ping_args() throw();

  bool operator == (const DBService_ping_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const DBService_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DBService_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const DBService_ping_args& obj);
};


class DBService_ping_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~DBService_ping_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const DBService_ping_pargs& obj);
};


class DBService_ping_result {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  DBService_ping_result(const DBService_ping_result&);
  DBService_ping_result& operator=(const DBService_ping_result&);
  DBService_ping_result() {
  }

  virtual ~DBService_ping_result() throw();

  bool operator == (const DBService_ping_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const DBService_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DBService_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const DBService_ping_result& obj);
};


class DBService_ping_presult {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~DBService_ping_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const DBService_ping_presult& obj);
};

typedef struct _DBService_putData_args__isset {
  _DBService_putData_args__isset() : value(false) {}
  bool value :1;
} _DBService_putData_args__isset;

class DBService_putData_args {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  DBService_putData_args(const DBService_putData_args&);
  DBService_putData_args& operator=(const DBService_putData_args&);
  DBService_putData_args() : value() {
  }

  virtual ~DBService_putData_args() throw();
  std::string value;

  _DBService_putData_args__isset __isset;

  void __set_value(const std::string& val);

  bool operator == (const DBService_putData_args & rhs) const
  {
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const DBService_putData_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DBService_putData_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const DBService_putData_args& obj);
};


class DBService_putData_pargs {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};


  virtual ~DBService_putData_pargs() throw();
  const std::string* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const DBService_putData_pargs& obj);
};

typedef struct _DBService_putData_result__isset {
  _DBService_putData_result__isset() : success(false) {}
  bool success :1;
} _DBService_putData_result__isset;

class DBService_putData_result {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};

  DBService_putData_result(const DBService_putData_result&);
  DBService_putData_result& operator=(const DBService_putData_result&);
  DBService_putData_result() : success() {
  }

  virtual ~DBService_putData_result() throw();
  std::string success;

  _DBService_putData_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const DBService_putData_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DBService_putData_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DBService_putData_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const DBService_putData_result& obj);
};

typedef struct _DBService_putData_presult__isset {
  _DBService_putData_presult__isset() : success(false) {}
  bool success :1;
} _DBService_putData_presult__isset;

class DBService_putData_presult {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};


  virtual ~DBService_putData_presult() throw();
  std::string* success;

  _DBService_putData_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const DBService_putData_presult& obj);
};

typedef struct _DBService_putDataForce_args__isset {
  _DBService_putDataForce_args__isset() : value(false), remote_region(false), remote_node(false) {}
  bool value :1;
  bool remote_region :1;
  bool remote_node :1;
} _DBService_putDataForce_args__isset;

class DBService_putDataForce_args {
 public:

  static const char* ascii_fingerprint; // = "28C2ECC89260BADB9C70330FBF47BFA8";
  static const uint8_t binary_fingerprint[16]; // = {0x28,0xC2,0xEC,0xC8,0x92,0x60,0xBA,0xDB,0x9C,0x70,0x33,0x0F,0xBF,0x47,0xBF,0xA8};

  DBService_putDataForce_args(const DBService_putDataForce_args&);
  DBService_putDataForce_args& operator=(const DBService_putDataForce_args&);
  DBService_putDataForce_args() : value(), remote_region(0), remote_node(0) {
  }

  virtual ~DBService_putDataForce_args() throw();
  std::string value;
  int32_t remote_region;
  int32_t remote_node;

  _DBService_putDataForce_args__isset __isset;

  void __set_value(const std::string& val);

  void __set_remote_region(const int32_t val);

  void __set_remote_node(const int32_t val);

  bool operator == (const DBService_putDataForce_args & rhs) const
  {
    if (!(value == rhs.value))
      return false;
    if (!(remote_region == rhs.remote_region))
      return false;
    if (!(remote_node == rhs.remote_node))
      return false;
    return true;
  }
  bool operator != (const DBService_putDataForce_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DBService_putDataForce_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const DBService_putDataForce_args& obj);
};


class DBService_putDataForce_pargs {
 public:

  static const char* ascii_fingerprint; // = "28C2ECC89260BADB9C70330FBF47BFA8";
  static const uint8_t binary_fingerprint[16]; // = {0x28,0xC2,0xEC,0xC8,0x92,0x60,0xBA,0xDB,0x9C,0x70,0x33,0x0F,0xBF,0x47,0xBF,0xA8};


  virtual ~DBService_putDataForce_pargs() throw();
  const std::string* value;
  const int32_t* remote_region;
  const int32_t* remote_node;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const DBService_putDataForce_pargs& obj);
};

typedef struct _DBService_putDataForce_result__isset {
  _DBService_putDataForce_result__isset() : success(false) {}
  bool success :1;
} _DBService_putDataForce_result__isset;

class DBService_putDataForce_result {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};

  DBService_putDataForce_result(const DBService_putDataForce_result&);
  DBService_putDataForce_result& operator=(const DBService_putDataForce_result&);
  DBService_putDataForce_result() : success() {
  }

  virtual ~DBService_putDataForce_result() throw();
  std::string success;

  _DBService_putDataForce_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const DBService_putDataForce_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DBService_putDataForce_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DBService_putDataForce_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const DBService_putDataForce_result& obj);
};

typedef struct _DBService_putDataForce_presult__isset {
  _DBService_putDataForce_presult__isset() : success(false) {}
  bool success :1;
} _DBService_putDataForce_presult__isset;

class DBService_putDataForce_presult {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};


  virtual ~DBService_putDataForce_presult() throw();
  std::string* success;

  _DBService_putDataForce_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const DBService_putDataForce_presult& obj);
};

typedef struct _DBService_updateData_args__isset {
  _DBService_updateData_args__isset() : d(false) {}
  bool d :1;
} _DBService_updateData_args__isset;

class DBService_updateData_args {
 public:

  static const char* ascii_fingerprint; // = "B6E8918D242D6AA4B12BFE5B2137B70E";
  static const uint8_t binary_fingerprint[16]; // = {0xB6,0xE8,0x91,0x8D,0x24,0x2D,0x6A,0xA4,0xB1,0x2B,0xFE,0x5B,0x21,0x37,0xB7,0x0E};

  DBService_updateData_args(const DBService_updateData_args&);
  DBService_updateData_args& operator=(const DBService_updateData_args&);
  DBService_updateData_args() {
  }

  virtual ~DBService_updateData_args() throw();
  Data d;

  _DBService_updateData_args__isset __isset;

  void __set_d(const Data& val);

  bool operator == (const DBService_updateData_args & rhs) const
  {
    if (!(d == rhs.d))
      return false;
    return true;
  }
  bool operator != (const DBService_updateData_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DBService_updateData_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const DBService_updateData_args& obj);
};


class DBService_updateData_pargs {
 public:

  static const char* ascii_fingerprint; // = "B6E8918D242D6AA4B12BFE5B2137B70E";
  static const uint8_t binary_fingerprint[16]; // = {0xB6,0xE8,0x91,0x8D,0x24,0x2D,0x6A,0xA4,0xB1,0x2B,0xFE,0x5B,0x21,0x37,0xB7,0x0E};


  virtual ~DBService_updateData_pargs() throw();
  const Data* d;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const DBService_updateData_pargs& obj);
};

typedef struct _DBService_updateData_result__isset {
  _DBService_updateData_result__isset() : success(false) {}
  bool success :1;
} _DBService_updateData_result__isset;

class DBService_updateData_result {
 public:

  static const char* ascii_fingerprint; // = "D9D3B4421B1F23CB4063C80B484E7909";
  static const uint8_t binary_fingerprint[16]; // = {0xD9,0xD3,0xB4,0x42,0x1B,0x1F,0x23,0xCB,0x40,0x63,0xC8,0x0B,0x48,0x4E,0x79,0x09};

  DBService_updateData_result(const DBService_updateData_result&);
  DBService_updateData_result& operator=(const DBService_updateData_result&);
  DBService_updateData_result() : success(0) {
  }

  virtual ~DBService_updateData_result() throw();
  bool success;

  _DBService_updateData_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const DBService_updateData_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DBService_updateData_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DBService_updateData_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const DBService_updateData_result& obj);
};

typedef struct _DBService_updateData_presult__isset {
  _DBService_updateData_presult__isset() : success(false) {}
  bool success :1;
} _DBService_updateData_presult__isset;

class DBService_updateData_presult {
 public:

  static const char* ascii_fingerprint; // = "D9D3B4421B1F23CB4063C80B484E7909";
  static const uint8_t binary_fingerprint[16]; // = {0xD9,0xD3,0xB4,0x42,0x1B,0x1F,0x23,0xCB,0x40,0x63,0xC8,0x0B,0x48,0x4E,0x79,0x09};


  virtual ~DBService_updateData_presult() throw();
  bool* success;

  _DBService_updateData_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const DBService_updateData_presult& obj);
};

typedef struct _DBService_updateSecondaryData_args__isset {
  _DBService_updateSecondaryData_args__isset() : d(false), remote_region(false), remote_node(false) {}
  bool d :1;
  bool remote_region :1;
  bool remote_node :1;
} _DBService_updateSecondaryData_args__isset;

class DBService_updateSecondaryData_args {
 public:

  static const char* ascii_fingerprint; // = "CD9589295765BF7422F81D8BD91B1238";
  static const uint8_t binary_fingerprint[16]; // = {0xCD,0x95,0x89,0x29,0x57,0x65,0xBF,0x74,0x22,0xF8,0x1D,0x8B,0xD9,0x1B,0x12,0x38};

  DBService_updateSecondaryData_args(const DBService_updateSecondaryData_args&);
  DBService_updateSecondaryData_args& operator=(const DBService_updateSecondaryData_args&);
  DBService_updateSecondaryData_args() : remote_region(0), remote_node(0) {
  }

  virtual ~DBService_updateSecondaryData_args() throw();
  Data d;
  int32_t remote_region;
  int32_t remote_node;

  _DBService_updateSecondaryData_args__isset __isset;

  void __set_d(const Data& val);

  void __set_remote_region(const int32_t val);

  void __set_remote_node(const int32_t val);

  bool operator == (const DBService_updateSecondaryData_args & rhs) const
  {
    if (!(d == rhs.d))
      return false;
    if (!(remote_region == rhs.remote_region))
      return false;
    if (!(remote_node == rhs.remote_node))
      return false;
    return true;
  }
  bool operator != (const DBService_updateSecondaryData_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DBService_updateSecondaryData_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const DBService_updateSecondaryData_args& obj);
};


class DBService_updateSecondaryData_pargs {
 public:

  static const char* ascii_fingerprint; // = "CD9589295765BF7422F81D8BD91B1238";
  static const uint8_t binary_fingerprint[16]; // = {0xCD,0x95,0x89,0x29,0x57,0x65,0xBF,0x74,0x22,0xF8,0x1D,0x8B,0xD9,0x1B,0x12,0x38};


  virtual ~DBService_updateSecondaryData_pargs() throw();
  const Data* d;
  const int32_t* remote_region;
  const int32_t* remote_node;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const DBService_updateSecondaryData_pargs& obj);
};

typedef struct _DBService_updateSecondaryData_result__isset {
  _DBService_updateSecondaryData_result__isset() : success(false) {}
  bool success :1;
} _DBService_updateSecondaryData_result__isset;

class DBService_updateSecondaryData_result {
 public:

  static const char* ascii_fingerprint; // = "D9D3B4421B1F23CB4063C80B484E7909";
  static const uint8_t binary_fingerprint[16]; // = {0xD9,0xD3,0xB4,0x42,0x1B,0x1F,0x23,0xCB,0x40,0x63,0xC8,0x0B,0x48,0x4E,0x79,0x09};

  DBService_updateSecondaryData_result(const DBService_updateSecondaryData_result&);
  DBService_updateSecondaryData_result& operator=(const DBService_updateSecondaryData_result&);
  DBService_updateSecondaryData_result() : success(0) {
  }

  virtual ~DBService_updateSecondaryData_result() throw();
  bool success;

  _DBService_updateSecondaryData_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const DBService_updateSecondaryData_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DBService_updateSecondaryData_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DBService_updateSecondaryData_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const DBService_updateSecondaryData_result& obj);
};

typedef struct _DBService_updateSecondaryData_presult__isset {
  _DBService_updateSecondaryData_presult__isset() : success(false) {}
  bool success :1;
} _DBService_updateSecondaryData_presult__isset;

class DBService_updateSecondaryData_presult {
 public:

  static const char* ascii_fingerprint; // = "D9D3B4421B1F23CB4063C80B484E7909";
  static const uint8_t binary_fingerprint[16]; // = {0xD9,0xD3,0xB4,0x42,0x1B,0x1F,0x23,0xCB,0x40,0x63,0xC8,0x0B,0x48,0x4E,0x79,0x09};


  virtual ~DBService_updateSecondaryData_presult() throw();
  bool* success;

  _DBService_updateSecondaryData_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const DBService_updateSecondaryData_presult& obj);
};

typedef struct _DBService_getData_args__isset {
  _DBService_getData_args__isset() : sharded_key(false) {}
  bool sharded_key :1;
} _DBService_getData_args__isset;

class DBService_getData_args {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  DBService_getData_args(const DBService_getData_args&);
  DBService_getData_args& operator=(const DBService_getData_args&);
  DBService_getData_args() : sharded_key() {
  }

  virtual ~DBService_getData_args() throw();
  std::string sharded_key;

  _DBService_getData_args__isset __isset;

  void __set_sharded_key(const std::string& val);

  bool operator == (const DBService_getData_args & rhs) const
  {
    if (!(sharded_key == rhs.sharded_key))
      return false;
    return true;
  }
  bool operator != (const DBService_getData_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DBService_getData_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const DBService_getData_args& obj);
};


class DBService_getData_pargs {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};


  virtual ~DBService_getData_pargs() throw();
  const std::string* sharded_key;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const DBService_getData_pargs& obj);
};

typedef struct _DBService_getData_result__isset {
  _DBService_getData_result__isset() : success(false) {}
  bool success :1;
} _DBService_getData_result__isset;

class DBService_getData_result {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};

  DBService_getData_result(const DBService_getData_result&);
  DBService_getData_result& operator=(const DBService_getData_result&);
  DBService_getData_result() : success() {
  }

  virtual ~DBService_getData_result() throw();
  std::string success;

  _DBService_getData_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const DBService_getData_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DBService_getData_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DBService_getData_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const DBService_getData_result& obj);
};

typedef struct _DBService_getData_presult__isset {
  _DBService_getData_presult__isset() : success(false) {}
  bool success :1;
} _DBService_getData_presult__isset;

class DBService_getData_presult {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};


  virtual ~DBService_getData_presult() throw();
  std::string* success;

  _DBService_getData_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const DBService_getData_presult& obj);
};

typedef struct _DBService_deleteData_args__isset {
  _DBService_deleteData_args__isset() : sharded_key(false) {}
  bool sharded_key :1;
} _DBService_deleteData_args__isset;

class DBService_deleteData_args {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  DBService_deleteData_args(const DBService_deleteData_args&);
  DBService_deleteData_args& operator=(const DBService_deleteData_args&);
  DBService_deleteData_args() : sharded_key() {
  }

  virtual ~DBService_deleteData_args() throw();
  std::string sharded_key;

  _DBService_deleteData_args__isset __isset;

  void __set_sharded_key(const std::string& val);

  bool operator == (const DBService_deleteData_args & rhs) const
  {
    if (!(sharded_key == rhs.sharded_key))
      return false;
    return true;
  }
  bool operator != (const DBService_deleteData_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DBService_deleteData_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const DBService_deleteData_args& obj);
};


class DBService_deleteData_pargs {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};


  virtual ~DBService_deleteData_pargs() throw();
  const std::string* sharded_key;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const DBService_deleteData_pargs& obj);
};

typedef struct _DBService_deleteData_result__isset {
  _DBService_deleteData_result__isset() : success(false) {}
  bool success :1;
} _DBService_deleteData_result__isset;

class DBService_deleteData_result {
 public:

  static const char* ascii_fingerprint; // = "D9D3B4421B1F23CB4063C80B484E7909";
  static const uint8_t binary_fingerprint[16]; // = {0xD9,0xD3,0xB4,0x42,0x1B,0x1F,0x23,0xCB,0x40,0x63,0xC8,0x0B,0x48,0x4E,0x79,0x09};

  DBService_deleteData_result(const DBService_deleteData_result&);
  DBService_deleteData_result& operator=(const DBService_deleteData_result&);
  DBService_deleteData_result() : success(0) {
  }

  virtual ~DBService_deleteData_result() throw();
  bool success;

  _DBService_deleteData_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const DBService_deleteData_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DBService_deleteData_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DBService_deleteData_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const DBService_deleteData_result& obj);
};

typedef struct _DBService_deleteData_presult__isset {
  _DBService_deleteData_presult__isset() : success(false) {}
  bool success :1;
} _DBService_deleteData_presult__isset;

class DBService_deleteData_presult {
 public:

  static const char* ascii_fingerprint; // = "D9D3B4421B1F23CB4063C80B484E7909";
  static const uint8_t binary_fingerprint[16]; // = {0xD9,0xD3,0xB4,0x42,0x1B,0x1F,0x23,0xCB,0x40,0x63,0xC8,0x0B,0x48,0x4E,0x79,0x09};


  virtual ~DBService_deleteData_presult() throw();
  bool* success;

  _DBService_deleteData_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const DBService_deleteData_presult& obj);
};

typedef struct _DBService_deleteSecondaryData_args__isset {
  _DBService_deleteSecondaryData_args__isset() : sharded_key(false), remote_region(false), remote_node(false) {}
  bool sharded_key :1;
  bool remote_region :1;
  bool remote_node :1;
} _DBService_deleteSecondaryData_args__isset;

class DBService_deleteSecondaryData_args {
 public:

  static const char* ascii_fingerprint; // = "28C2ECC89260BADB9C70330FBF47BFA8";
  static const uint8_t binary_fingerprint[16]; // = {0x28,0xC2,0xEC,0xC8,0x92,0x60,0xBA,0xDB,0x9C,0x70,0x33,0x0F,0xBF,0x47,0xBF,0xA8};

  DBService_deleteSecondaryData_args(const DBService_deleteSecondaryData_args&);
  DBService_deleteSecondaryData_args& operator=(const DBService_deleteSecondaryData_args&);
  DBService_deleteSecondaryData_args() : sharded_key(), remote_region(0), remote_node(0) {
  }

  virtual ~DBService_deleteSecondaryData_args() throw();
  std::string sharded_key;
  int32_t remote_region;
  int32_t remote_node;

  _DBService_deleteSecondaryData_args__isset __isset;

  void __set_sharded_key(const std::string& val);

  void __set_remote_region(const int32_t val);

  void __set_remote_node(const int32_t val);

  bool operator == (const DBService_deleteSecondaryData_args & rhs) const
  {
    if (!(sharded_key == rhs.sharded_key))
      return false;
    if (!(remote_region == rhs.remote_region))
      return false;
    if (!(remote_node == rhs.remote_node))
      return false;
    return true;
  }
  bool operator != (const DBService_deleteSecondaryData_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DBService_deleteSecondaryData_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const DBService_deleteSecondaryData_args& obj);
};


class DBService_deleteSecondaryData_pargs {
 public:

  static const char* ascii_fingerprint; // = "28C2ECC89260BADB9C70330FBF47BFA8";
  static const uint8_t binary_fingerprint[16]; // = {0x28,0xC2,0xEC,0xC8,0x92,0x60,0xBA,0xDB,0x9C,0x70,0x33,0x0F,0xBF,0x47,0xBF,0xA8};


  virtual ~DBService_deleteSecondaryData_pargs() throw();
  const std::string* sharded_key;
  const int32_t* remote_region;
  const int32_t* remote_node;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const DBService_deleteSecondaryData_pargs& obj);
};

typedef struct _DBService_deleteSecondaryData_result__isset {
  _DBService_deleteSecondaryData_result__isset() : success(false) {}
  bool success :1;
} _DBService_deleteSecondaryData_result__isset;

class DBService_deleteSecondaryData_result {
 public:

  static const char* ascii_fingerprint; // = "D9D3B4421B1F23CB4063C80B484E7909";
  static const uint8_t binary_fingerprint[16]; // = {0xD9,0xD3,0xB4,0x42,0x1B,0x1F,0x23,0xCB,0x40,0x63,0xC8,0x0B,0x48,0x4E,0x79,0x09};

  DBService_deleteSecondaryData_result(const DBService_deleteSecondaryData_result&);
  DBService_deleteSecondaryData_result& operator=(const DBService_deleteSecondaryData_result&);
  DBService_deleteSecondaryData_result() : success(0) {
  }

  virtual ~DBService_deleteSecondaryData_result() throw();
  bool success;

  _DBService_deleteSecondaryData_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const DBService_deleteSecondaryData_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DBService_deleteSecondaryData_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DBService_deleteSecondaryData_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const DBService_deleteSecondaryData_result& obj);
};

typedef struct _DBService_deleteSecondaryData_presult__isset {
  _DBService_deleteSecondaryData_presult__isset() : success(false) {}
  bool success :1;
} _DBService_deleteSecondaryData_presult__isset;

class DBService_deleteSecondaryData_presult {
 public:

  static const char* ascii_fingerprint; // = "D9D3B4421B1F23CB4063C80B484E7909";
  static const uint8_t binary_fingerprint[16]; // = {0xD9,0xD3,0xB4,0x42,0x1B,0x1F,0x23,0xCB,0x40,0x63,0xC8,0x0B,0x48,0x4E,0x79,0x09};


  virtual ~DBService_deleteSecondaryData_presult() throw();
  bool* success;

  _DBService_deleteSecondaryData_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const DBService_deleteSecondaryData_presult& obj);
};

typedef struct _DBService_replicateData_args__isset {
  _DBService_replicateData_args__isset() : d(false), remote_region(false), remote_node(false) {}
  bool d :1;
  bool remote_region :1;
  bool remote_node :1;
} _DBService_replicateData_args__isset;

class DBService_replicateData_args {
 public:

  static const char* ascii_fingerprint; // = "CD9589295765BF7422F81D8BD91B1238";
  static const uint8_t binary_fingerprint[16]; // = {0xCD,0x95,0x89,0x29,0x57,0x65,0xBF,0x74,0x22,0xF8,0x1D,0x8B,0xD9,0x1B,0x12,0x38};

  DBService_replicateData_args(const DBService_replicateData_args&);
  DBService_replicateData_args& operator=(const DBService_replicateData_args&);
  DBService_replicateData_args() : remote_region(0), remote_node(0) {
  }

  virtual ~DBService_replicateData_args() throw();
  Data d;
  int32_t remote_region;
  int32_t remote_node;

  _DBService_replicateData_args__isset __isset;

  void __set_d(const Data& val);

  void __set_remote_region(const int32_t val);

  void __set_remote_node(const int32_t val);

  bool operator == (const DBService_replicateData_args & rhs) const
  {
    if (!(d == rhs.d))
      return false;
    if (!(remote_region == rhs.remote_region))
      return false;
    if (!(remote_node == rhs.remote_node))
      return false;
    return true;
  }
  bool operator != (const DBService_replicateData_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DBService_replicateData_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const DBService_replicateData_args& obj);
};


class DBService_replicateData_pargs {
 public:

  static const char* ascii_fingerprint; // = "CD9589295765BF7422F81D8BD91B1238";
  static const uint8_t binary_fingerprint[16]; // = {0xCD,0x95,0x89,0x29,0x57,0x65,0xBF,0x74,0x22,0xF8,0x1D,0x8B,0xD9,0x1B,0x12,0x38};


  virtual ~DBService_replicateData_pargs() throw();
  const Data* d;
  const int32_t* remote_region;
  const int32_t* remote_node;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const DBService_replicateData_pargs& obj);
};

typedef struct _DBService_replicateData_result__isset {
  _DBService_replicateData_result__isset() : success(false) {}
  bool success :1;
} _DBService_replicateData_result__isset;

class DBService_replicateData_result {
 public:

  static const char* ascii_fingerprint; // = "D9D3B4421B1F23CB4063C80B484E7909";
  static const uint8_t binary_fingerprint[16]; // = {0xD9,0xD3,0xB4,0x42,0x1B,0x1F,0x23,0xCB,0x40,0x63,0xC8,0x0B,0x48,0x4E,0x79,0x09};

  DBService_replicateData_result(const DBService_replicateData_result&);
  DBService_replicateData_result& operator=(const DBService_replicateData_result&);
  DBService_replicateData_result() : success(0) {
  }

  virtual ~DBService_replicateData_result() throw();
  bool success;

  _DBService_replicateData_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const DBService_replicateData_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DBService_replicateData_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DBService_replicateData_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const DBService_replicateData_result& obj);
};

typedef struct _DBService_replicateData_presult__isset {
  _DBService_replicateData_presult__isset() : success(false) {}
  bool success :1;
} _DBService_replicateData_presult__isset;

class DBService_replicateData_presult {
 public:

  static const char* ascii_fingerprint; // = "D9D3B4421B1F23CB4063C80B484E7909";
  static const uint8_t binary_fingerprint[16]; // = {0xD9,0xD3,0xB4,0x42,0x1B,0x1F,0x23,0xCB,0x40,0x63,0xC8,0x0B,0x48,0x4E,0x79,0x09};


  virtual ~DBService_replicateData_presult() throw();
  bool* success;

  _DBService_replicateData_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const DBService_replicateData_presult& obj);
};

typedef struct _DBService_resyncData_args__isset {
  _DBService_resyncData_args__isset() : remote_region(false), remote_node(false) {}
  bool remote_region :1;
  bool remote_node :1;
} _DBService_resyncData_args__isset;

class DBService_resyncData_args {
 public:

  static const char* ascii_fingerprint; // = "989D1F1AE8D148D5E2119FFEC4BBBEE3";
  static const uint8_t binary_fingerprint[16]; // = {0x98,0x9D,0x1F,0x1A,0xE8,0xD1,0x48,0xD5,0xE2,0x11,0x9F,0xFE,0xC4,0xBB,0xBE,0xE3};

  DBService_resyncData_args(const DBService_resyncData_args&);
  DBService_resyncData_args& operator=(const DBService_resyncData_args&);
  DBService_resyncData_args() : remote_region(0), remote_node(0) {
  }

  virtual ~DBService_resyncData_args() throw();
  int32_t remote_region;
  int32_t remote_node;

  _DBService_resyncData_args__isset __isset;

  void __set_remote_region(const int32_t val);

  void __set_remote_node(const int32_t val);

  bool operator == (const DBService_resyncData_args & rhs) const
  {
    if (!(remote_region == rhs.remote_region))
      return false;
    if (!(remote_node == rhs.remote_node))
      return false;
    return true;
  }
  bool operator != (const DBService_resyncData_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DBService_resyncData_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const DBService_resyncData_args& obj);
};


class DBService_resyncData_pargs {
 public:

  static const char* ascii_fingerprint; // = "989D1F1AE8D148D5E2119FFEC4BBBEE3";
  static const uint8_t binary_fingerprint[16]; // = {0x98,0x9D,0x1F,0x1A,0xE8,0xD1,0x48,0xD5,0xE2,0x11,0x9F,0xFE,0xC4,0xBB,0xBE,0xE3};


  virtual ~DBService_resyncData_pargs() throw();
  const int32_t* remote_region;
  const int32_t* remote_node;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const DBService_resyncData_pargs& obj);
};

typedef struct _DBService_resyncData_result__isset {
  _DBService_resyncData_result__isset() : success(false) {}
  bool success :1;
} _DBService_resyncData_result__isset;

class DBService_resyncData_result {
 public:

  static const char* ascii_fingerprint; // = "DD635BE8A82C2DC3637D24F73E05DB13";
  static const uint8_t binary_fingerprint[16]; // = {0xDD,0x63,0x5B,0xE8,0xA8,0x2C,0x2D,0xC3,0x63,0x7D,0x24,0xF7,0x3E,0x05,0xDB,0x13};

  DBService_resyncData_result(const DBService_resyncData_result&);
  DBService_resyncData_result& operator=(const DBService_resyncData_result&);
  DBService_resyncData_result() {
  }

  virtual ~DBService_resyncData_result() throw();
  ShardContent success;

  _DBService_resyncData_result__isset __isset;

  void __set_success(const ShardContent& val);

  bool operator == (const DBService_resyncData_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DBService_resyncData_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DBService_resyncData_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const DBService_resyncData_result& obj);
};

typedef struct _DBService_resyncData_presult__isset {
  _DBService_resyncData_presult__isset() : success(false) {}
  bool success :1;
} _DBService_resyncData_presult__isset;

class DBService_resyncData_presult {
 public:

  static const char* ascii_fingerprint; // = "DD635BE8A82C2DC3637D24F73E05DB13";
  static const uint8_t binary_fingerprint[16]; // = {0xDD,0x63,0x5B,0xE8,0xA8,0x2C,0x2D,0xC3,0x63,0x7D,0x24,0xF7,0x3E,0x05,0xDB,0x13};


  virtual ~DBService_resyncData_presult() throw();
  ShardContent* success;

  _DBService_resyncData_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const DBService_resyncData_presult& obj);
};


class DBService_getRecover_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  DBService_getRecover_args(const DBService_getRecover_args&);
  DBService_getRecover_args& operator=(const DBService_getRecover_args&);
  DBService_getRecover_args() {
  }

  virtual ~DBService_getRecover_args() throw();

  bool operator == (const DBService_getRecover_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const DBService_getRecover_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DBService_getRecover_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const DBService_getRecover_args& obj);
};


class DBService_getRecover_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~DBService_getRecover_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const DBService_getRecover_pargs& obj);
};

typedef struct _DBService_getRecover_result__isset {
  _DBService_getRecover_result__isset() : success(false) {}
  bool success :1;
} _DBService_getRecover_result__isset;

class DBService_getRecover_result {
 public:

  static const char* ascii_fingerprint; // = "491735FE239F275597C5AA026860CA88";
  static const uint8_t binary_fingerprint[16]; // = {0x49,0x17,0x35,0xFE,0x23,0x9F,0x27,0x55,0x97,0xC5,0xAA,0x02,0x68,0x60,0xCA,0x88};

  DBService_getRecover_result(const DBService_getRecover_result&);
  DBService_getRecover_result& operator=(const DBService_getRecover_result&);
  DBService_getRecover_result() {
  }

  virtual ~DBService_getRecover_result() throw();
  GetRecover success;

  _DBService_getRecover_result__isset __isset;

  void __set_success(const GetRecover& val);

  bool operator == (const DBService_getRecover_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DBService_getRecover_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DBService_getRecover_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const DBService_getRecover_result& obj);
};

typedef struct _DBService_getRecover_presult__isset {
  _DBService_getRecover_presult__isset() : success(false) {}
  bool success :1;
} _DBService_getRecover_presult__isset;

class DBService_getRecover_presult {
 public:

  static const char* ascii_fingerprint; // = "491735FE239F275597C5AA026860CA88";
  static const uint8_t binary_fingerprint[16]; // = {0x49,0x17,0x35,0xFE,0x23,0x9F,0x27,0x55,0x97,0xC5,0xAA,0x02,0x68,0x60,0xCA,0x88};


  virtual ~DBService_getRecover_presult() throw();
  GetRecover* success;

  _DBService_getRecover_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const DBService_getRecover_presult& obj);
};

typedef struct _DBService_sendAppend_args__isset {
  _DBService_sendAppend_args__isset() : request(false) {}
  bool request :1;
} _DBService_sendAppend_args__isset;

class DBService_sendAppend_args {
 public:

  static const char* ascii_fingerprint; // = "4678D384F76BCECE0026EBDAFB4ABE16";
  static const uint8_t binary_fingerprint[16]; // = {0x46,0x78,0xD3,0x84,0xF7,0x6B,0xCE,0xCE,0x00,0x26,0xEB,0xDA,0xFB,0x4A,0xBE,0x16};

  DBService_sendAppend_args(const DBService_sendAppend_args&);
  DBService_sendAppend_args& operator=(const DBService_sendAppend_args&);
  DBService_sendAppend_args() {
  }

  virtual ~DBService_sendAppend_args() throw();
  AppendRequest request;

  _DBService_sendAppend_args__isset __isset;

  void __set_request(const AppendRequest& val);

  bool operator == (const DBService_sendAppend_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const DBService_sendAppend_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DBService_sendAppend_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const DBService_sendAppend_args& obj);
};


class DBService_sendAppend_pargs {
 public:

  static const char* ascii_fingerprint; // = "4678D384F76BCECE0026EBDAFB4ABE16";
  static const uint8_t binary_fingerprint[16]; // = {0x46,0x78,0xD3,0x84,0xF7,0x6B,0xCE,0xCE,0x00,0x26,0xEB,0xDA,0xFB,0x4A,0xBE,0x16};


  virtual ~DBService_sendAppend_pargs() throw();
  const AppendRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const DBService_sendAppend_pargs& obj);
};

typedef struct _DBService_sendAppend_result__isset {
  _DBService_sendAppend_result__isset() : success(false) {}
  bool success :1;
} _DBService_sendAppend_result__isset;

class DBService_sendAppend_result {
 public:

  static const char* ascii_fingerprint; // = "49E764C8B69512E0ECAFC9B0C79DBFA8";
  static const uint8_t binary_fingerprint[16]; // = {0x49,0xE7,0x64,0xC8,0xB6,0x95,0x12,0xE0,0xEC,0xAF,0xC9,0xB0,0xC7,0x9D,0xBF,0xA8};

  DBService_sendAppend_result(const DBService_sendAppend_result&);
  DBService_sendAppend_result& operator=(const DBService_sendAppend_result&);
  DBService_sendAppend_result() {
  }

  virtual ~DBService_sendAppend_result() throw();
  AppendResponse success;

  _DBService_sendAppend_result__isset __isset;

  void __set_success(const AppendResponse& val);

  bool operator == (const DBService_sendAppend_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DBService_sendAppend_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DBService_sendAppend_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const DBService_sendAppend_result& obj);
};

typedef struct _DBService_sendAppend_presult__isset {
  _DBService_sendAppend_presult__isset() : success(false) {}
  bool success :1;
} _DBService_sendAppend_presult__isset;

class DBService_sendAppend_presult {
 public:

  static const char* ascii_fingerprint; // = "49E764C8B69512E0ECAFC9B0C79DBFA8";
  static const uint8_t binary_fingerprint[16]; // = {0x49,0xE7,0x64,0xC8,0xB6,0x95,0x12,0xE0,0xEC,0xAF,0xC9,0xB0,0xC7,0x9D,0xBF,0xA8};


  virtual ~DBService_sendAppend_presult() throw();
  AppendResponse* success;

  _DBService_sendAppend_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const DBService_sendAppend_presult& obj);
};

typedef struct _DBService_sendVote_args__isset {
  _DBService_sendVote_args__isset() : request(false) {}
  bool request :1;
} _DBService_sendVote_args__isset;

class DBService_sendVote_args {
 public:

  static const char* ascii_fingerprint; // = "EDE0985507073D811F796DAC76FC9E5E";
  static const uint8_t binary_fingerprint[16]; // = {0xED,0xE0,0x98,0x55,0x07,0x07,0x3D,0x81,0x1F,0x79,0x6D,0xAC,0x76,0xFC,0x9E,0x5E};

  DBService_sendVote_args(const DBService_sendVote_args&);
  DBService_sendVote_args& operator=(const DBService_sendVote_args&);
  DBService_sendVote_args() {
  }

  virtual ~DBService_sendVote_args() throw();
  VoteRequest request;

  _DBService_sendVote_args__isset __isset;

  void __set_request(const VoteRequest& val);

  bool operator == (const DBService_sendVote_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const DBService_sendVote_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DBService_sendVote_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const DBService_sendVote_args& obj);
};


class DBService_sendVote_pargs {
 public:

  static const char* ascii_fingerprint; // = "EDE0985507073D811F796DAC76FC9E5E";
  static const uint8_t binary_fingerprint[16]; // = {0xED,0xE0,0x98,0x55,0x07,0x07,0x3D,0x81,0x1F,0x79,0x6D,0xAC,0x76,0xFC,0x9E,0x5E};


  virtual ~DBService_sendVote_pargs() throw();
  const VoteRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const DBService_sendVote_pargs& obj);
};

typedef struct _DBService_sendVote_result__isset {
  _DBService_sendVote_result__isset() : success(false) {}
  bool success :1;
} _DBService_sendVote_result__isset;

class DBService_sendVote_result {
 public:

  static const char* ascii_fingerprint; // = "49E764C8B69512E0ECAFC9B0C79DBFA8";
  static const uint8_t binary_fingerprint[16]; // = {0x49,0xE7,0x64,0xC8,0xB6,0x95,0x12,0xE0,0xEC,0xAF,0xC9,0xB0,0xC7,0x9D,0xBF,0xA8};

  DBService_sendVote_result(const DBService_sendVote_result&);
  DBService_sendVote_result& operator=(const DBService_sendVote_result&);
  DBService_sendVote_result() {
  }

  virtual ~DBService_sendVote_result() throw();
  VoteResponse success;

  _DBService_sendVote_result__isset __isset;

  void __set_success(const VoteResponse& val);

  bool operator == (const DBService_sendVote_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DBService_sendVote_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DBService_sendVote_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const DBService_sendVote_result& obj);
};

typedef struct _DBService_sendVote_presult__isset {
  _DBService_sendVote_presult__isset() : success(false) {}
  bool success :1;
} _DBService_sendVote_presult__isset;

class DBService_sendVote_presult {
 public:

  static const char* ascii_fingerprint; // = "49E764C8B69512E0ECAFC9B0C79DBFA8";
  static const uint8_t binary_fingerprint[16]; // = {0x49,0xE7,0x64,0xC8,0xB6,0x95,0x12,0xE0,0xEC,0xAF,0xC9,0xB0,0xC7,0x9D,0xBF,0xA8};


  virtual ~DBService_sendVote_presult() throw();
  VoteResponse* success;

  _DBService_sendVote_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const DBService_sendVote_presult& obj);
};


class DBService_zip_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  DBService_zip_args(const DBService_zip_args&);
  DBService_zip_args& operator=(const DBService_zip_args&);
  DBService_zip_args() {
  }

  virtual ~DBService_zip_args() throw();

  bool operator == (const DBService_zip_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const DBService_zip_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DBService_zip_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const DBService_zip_args& obj);
};


class DBService_zip_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~DBService_zip_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const DBService_zip_pargs& obj);
};

class DBServiceClient : virtual public DBServiceIf {
 public:
  DBServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  DBServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ping();
  void send_ping();
  void recv_ping();
  void putData(std::string& _return, const std::string& value);
  void send_putData(const std::string& value);
  void recv_putData(std::string& _return);
  void putDataForce(std::string& _return, const std::string& value, const int32_t remote_region, const int32_t remote_node);
  void send_putDataForce(const std::string& value, const int32_t remote_region, const int32_t remote_node);
  void recv_putDataForce(std::string& _return);
  bool updateData(const Data& d);
  void send_updateData(const Data& d);
  bool recv_updateData();
  bool updateSecondaryData(const Data& d, const int32_t remote_region, const int32_t remote_node);
  void send_updateSecondaryData(const Data& d, const int32_t remote_region, const int32_t remote_node);
  bool recv_updateSecondaryData();
  void getData(std::string& _return, const std::string& sharded_key);
  void send_getData(const std::string& sharded_key);
  void recv_getData(std::string& _return);
  bool deleteData(const std::string& sharded_key);
  void send_deleteData(const std::string& sharded_key);
  bool recv_deleteData();
  bool deleteSecondaryData(const std::string& sharded_key, const int32_t remote_region, const int32_t remote_node);
  void send_deleteSecondaryData(const std::string& sharded_key, const int32_t remote_region, const int32_t remote_node);
  bool recv_deleteSecondaryData();
  bool replicateData(const Data& d, const int32_t remote_region, const int32_t remote_node);
  void send_replicateData(const Data& d, const int32_t remote_region, const int32_t remote_node);
  bool recv_replicateData();
  void resyncData(ShardContent& _return, const int32_t remote_region, const int32_t remote_node);
  void send_resyncData(const int32_t remote_region, const int32_t remote_node);
  void recv_resyncData(ShardContent& _return);
  void getRecover(GetRecover& _return);
  void send_getRecover();
  void recv_getRecover(GetRecover& _return);
  void sendAppend(AppendResponse& _return, const AppendRequest& request);
  void send_sendAppend(const AppendRequest& request);
  void recv_sendAppend(AppendResponse& _return);
  void sendVote(VoteResponse& _return, const VoteRequest& request);
  void send_sendVote(const VoteRequest& request);
  void recv_sendVote(VoteResponse& _return);
  void zip();
  void send_zip();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class DBServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<DBServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (DBServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_putData(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_putDataForce(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateData(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateSecondaryData(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getData(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteData(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteSecondaryData(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_replicateData(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_resyncData(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getRecover(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sendAppend(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sendVote(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_zip(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  DBServiceProcessor(boost::shared_ptr<DBServiceIf> iface) :
    iface_(iface) {
    processMap_["ping"] = &DBServiceProcessor::process_ping;
    processMap_["putData"] = &DBServiceProcessor::process_putData;
    processMap_["putDataForce"] = &DBServiceProcessor::process_putDataForce;
    processMap_["updateData"] = &DBServiceProcessor::process_updateData;
    processMap_["updateSecondaryData"] = &DBServiceProcessor::process_updateSecondaryData;
    processMap_["getData"] = &DBServiceProcessor::process_getData;
    processMap_["deleteData"] = &DBServiceProcessor::process_deleteData;
    processMap_["deleteSecondaryData"] = &DBServiceProcessor::process_deleteSecondaryData;
    processMap_["replicateData"] = &DBServiceProcessor::process_replicateData;
    processMap_["resyncData"] = &DBServiceProcessor::process_resyncData;
    processMap_["getRecover"] = &DBServiceProcessor::process_getRecover;
    processMap_["sendAppend"] = &DBServiceProcessor::process_sendAppend;
    processMap_["sendVote"] = &DBServiceProcessor::process_sendVote;
    processMap_["zip"] = &DBServiceProcessor::process_zip;
  }

  virtual ~DBServiceProcessor() {}
};

class DBServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  DBServiceProcessorFactory(const ::boost::shared_ptr< DBServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< DBServiceIfFactory > handlerFactory_;
};

class DBServiceMultiface : virtual public DBServiceIf {
 public:
  DBServiceMultiface(std::vector<boost::shared_ptr<DBServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~DBServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<DBServiceIf> > ifaces_;
  DBServiceMultiface() {}
  void add(boost::shared_ptr<DBServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void ping() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ping();
    }
    ifaces_[i]->ping();
  }

  void putData(std::string& _return, const std::string& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->putData(_return, value);
    }
    ifaces_[i]->putData(_return, value);
    return;
  }

  void putDataForce(std::string& _return, const std::string& value, const int32_t remote_region, const int32_t remote_node) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->putDataForce(_return, value, remote_region, remote_node);
    }
    ifaces_[i]->putDataForce(_return, value, remote_region, remote_node);
    return;
  }

  bool updateData(const Data& d) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateData(d);
    }
    return ifaces_[i]->updateData(d);
  }

  bool updateSecondaryData(const Data& d, const int32_t remote_region, const int32_t remote_node) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateSecondaryData(d, remote_region, remote_node);
    }
    return ifaces_[i]->updateSecondaryData(d, remote_region, remote_node);
  }

  void getData(std::string& _return, const std::string& sharded_key) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getData(_return, sharded_key);
    }
    ifaces_[i]->getData(_return, sharded_key);
    return;
  }

  bool deleteData(const std::string& sharded_key) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteData(sharded_key);
    }
    return ifaces_[i]->deleteData(sharded_key);
  }

  bool deleteSecondaryData(const std::string& sharded_key, const int32_t remote_region, const int32_t remote_node) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteSecondaryData(sharded_key, remote_region, remote_node);
    }
    return ifaces_[i]->deleteSecondaryData(sharded_key, remote_region, remote_node);
  }

  bool replicateData(const Data& d, const int32_t remote_region, const int32_t remote_node) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->replicateData(d, remote_region, remote_node);
    }
    return ifaces_[i]->replicateData(d, remote_region, remote_node);
  }

  void resyncData(ShardContent& _return, const int32_t remote_region, const int32_t remote_node) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->resyncData(_return, remote_region, remote_node);
    }
    ifaces_[i]->resyncData(_return, remote_region, remote_node);
    return;
  }

  void getRecover(GetRecover& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getRecover(_return);
    }
    ifaces_[i]->getRecover(_return);
    return;
  }

  void sendAppend(AppendResponse& _return, const AppendRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sendAppend(_return, request);
    }
    ifaces_[i]->sendAppend(_return, request);
    return;
  }

  void sendVote(VoteResponse& _return, const VoteRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sendVote(_return, request);
    }
    ifaces_[i]->sendVote(_return, request);
    return;
  }

  void zip() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->zip();
    }
    ifaces_[i]->zip();
  }

};

} // namespace

#endif
