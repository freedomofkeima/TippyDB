/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef dbservice_TYPES_H
#define dbservice_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace dbservice {

class Data;

class Exception;

typedef struct _Data__isset {
  _Data__isset() : key(false), value(false) {}
  bool key :1;
  bool value :1;
} _Data__isset;

class Data {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

  Data(const Data&);
  Data& operator=(const Data&);
  Data() : key(), value() {
  }

  virtual ~Data() throw();
  std::string key;
  std::string value;

  _Data__isset __isset;

  void __set_key(const std::string& val);

  void __set_value(const std::string& val);

  bool operator == (const Data & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const Data &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Data & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Data& obj);
};

void swap(Data &a, Data &b);

typedef struct _Exception__isset {
  _Exception__isset() : error_code(false), description(false) {}
  bool error_code :1;
  bool description :1;
} _Exception__isset;

class Exception {
 public:

  static const char* ascii_fingerprint; // = "3F5FC93B338687BC7235B1AB103F47B3";
  static const uint8_t binary_fingerprint[16]; // = {0x3F,0x5F,0xC9,0x3B,0x33,0x86,0x87,0xBC,0x72,0x35,0xB1,0xAB,0x10,0x3F,0x47,0xB3};

  Exception(const Exception&);
  Exception& operator=(const Exception&);
  Exception() : error_code(0), description() {
  }

  virtual ~Exception() throw();
  int32_t error_code;
  std::string description;

  _Exception__isset __isset;

  void __set_error_code(const int32_t val);

  void __set_description(const std::string& val);

  bool operator == (const Exception & rhs) const
  {
    if (!(error_code == rhs.error_code))
      return false;
    if (!(description == rhs.description))
      return false;
    return true;
  }
  bool operator != (const Exception &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Exception & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Exception& obj);
};

void swap(Exception &a, Exception &b);

} // namespace

#endif
