/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef dbservice_TYPES_H
#define dbservice_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace dbservice {

typedef std::vector<class Data>  Shard;

class Data;

class ShardContent;

class GetRecover;

class AppendRequest;

class AppendResponse;

class VoteRequest;

class VoteResponse;

typedef struct _Data__isset {
  _Data__isset() : key(false), value(false), ts(false) {}
  bool key :1;
  bool value :1;
  bool ts :1;
} _Data__isset;

class Data {
 public:

  static const char* ascii_fingerprint; // = "A0ED90CE9B69D7A0FCE24E26CAECD2AF";
  static const uint8_t binary_fingerprint[16]; // = {0xA0,0xED,0x90,0xCE,0x9B,0x69,0xD7,0xA0,0xFC,0xE2,0x4E,0x26,0xCA,0xEC,0xD2,0xAF};

  Data(const Data&);
  Data& operator=(const Data&);
  Data() : key(), value(), ts(0) {
  }

  virtual ~Data() throw();
  std::string key;
  std::string value;
  int64_t ts;

  _Data__isset __isset;

  void __set_key(const std::string& val);

  void __set_value(const std::string& val);

  void __set_ts(const int64_t val);

  bool operator == (const Data & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(value == rhs.value))
      return false;
    if (!(ts == rhs.ts))
      return false;
    return true;
  }
  bool operator != (const Data &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Data & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Data& obj);
};

void swap(Data &a, Data &b);

typedef struct _ShardContent__isset {
  _ShardContent__isset() : data(false) {}
  bool data :1;
} _ShardContent__isset;

class ShardContent {
 public:

  static const char* ascii_fingerprint; // = "CADF07CD5CD3A18B4DEF7E3A4388D017";
  static const uint8_t binary_fingerprint[16]; // = {0xCA,0xDF,0x07,0xCD,0x5C,0xD3,0xA1,0x8B,0x4D,0xEF,0x7E,0x3A,0x43,0x88,0xD0,0x17};

  ShardContent(const ShardContent&);
  ShardContent& operator=(const ShardContent&);
  ShardContent() {
  }

  virtual ~ShardContent() throw();
  Shard data;

  _ShardContent__isset __isset;

  void __set_data(const Shard& val);

  bool operator == (const ShardContent & rhs) const
  {
    if (!(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const ShardContent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ShardContent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ShardContent& obj);
};

void swap(ShardContent &a, ShardContent &b);

typedef struct _GetRecover__isset {
  _GetRecover__isset() : term(false), commit_idx(false), entry(false), isLeader(false) {}
  bool term :1;
  bool commit_idx :1;
  bool entry :1;
  bool isLeader :1;
} _GetRecover__isset;

class GetRecover {
 public:

  static const char* ascii_fingerprint; // = "255A92C076C015DBAC5DBD5B682082BE";
  static const uint8_t binary_fingerprint[16]; // = {0x25,0x5A,0x92,0xC0,0x76,0xC0,0x15,0xDB,0xAC,0x5D,0xBD,0x5B,0x68,0x20,0x82,0xBE};

  GetRecover(const GetRecover&);
  GetRecover& operator=(const GetRecover&);
  GetRecover() : term(0), commit_idx(0), entry(), isLeader(0) {
  }

  virtual ~GetRecover() throw();
  int32_t term;
  int32_t commit_idx;
  std::string entry;
  bool isLeader;

  _GetRecover__isset __isset;

  void __set_term(const int32_t val);

  void __set_commit_idx(const int32_t val);

  void __set_entry(const std::string& val);

  void __set_isLeader(const bool val);

  bool operator == (const GetRecover & rhs) const
  {
    if (!(term == rhs.term))
      return false;
    if (!(commit_idx == rhs.commit_idx))
      return false;
    if (!(entry == rhs.entry))
      return false;
    if (!(isLeader == rhs.isLeader))
      return false;
    return true;
  }
  bool operator != (const GetRecover &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetRecover & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const GetRecover& obj);
};

void swap(GetRecover &a, GetRecover &b);

typedef struct _AppendRequest__isset {
  _AppendRequest__isset() : term(false), commit_idx(false), entry(false) {}
  bool term :1;
  bool commit_idx :1;
  bool entry :1;
} _AppendRequest__isset;

class AppendRequest {
 public:

  static const char* ascii_fingerprint; // = "4086F12A5C2D615560236565C542F3C3";
  static const uint8_t binary_fingerprint[16]; // = {0x40,0x86,0xF1,0x2A,0x5C,0x2D,0x61,0x55,0x60,0x23,0x65,0x65,0xC5,0x42,0xF3,0xC3};

  AppendRequest(const AppendRequest&);
  AppendRequest& operator=(const AppendRequest&);
  AppendRequest() : term(0), commit_idx(0), entry() {
  }

  virtual ~AppendRequest() throw();
  int32_t term;
  int32_t commit_idx;
  std::string entry;

  _AppendRequest__isset __isset;

  void __set_term(const int32_t val);

  void __set_commit_idx(const int32_t val);

  void __set_entry(const std::string& val);

  bool operator == (const AppendRequest & rhs) const
  {
    if (!(term == rhs.term))
      return false;
    if (!(commit_idx == rhs.commit_idx))
      return false;
    if (!(entry == rhs.entry))
      return false;
    return true;
  }
  bool operator != (const AppendRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AppendRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const AppendRequest& obj);
};

void swap(AppendRequest &a, AppendRequest &b);

typedef struct _AppendResponse__isset {
  _AppendResponse__isset() : term(false), succeeds(false) {}
  bool term :1;
  bool succeeds :1;
} _AppendResponse__isset;

class AppendResponse {
 public:

  static const char* ascii_fingerprint; // = "4DC0C1A1F380340B40244ADC7FB0BA60";
  static const uint8_t binary_fingerprint[16]; // = {0x4D,0xC0,0xC1,0xA1,0xF3,0x80,0x34,0x0B,0x40,0x24,0x4A,0xDC,0x7F,0xB0,0xBA,0x60};

  AppendResponse(const AppendResponse&);
  AppendResponse& operator=(const AppendResponse&);
  AppendResponse() : term(0), succeeds(0) {
  }

  virtual ~AppendResponse() throw();
  int32_t term;
  bool succeeds;

  _AppendResponse__isset __isset;

  void __set_term(const int32_t val);

  void __set_succeeds(const bool val);

  bool operator == (const AppendResponse & rhs) const
  {
    if (!(term == rhs.term))
      return false;
    if (!(succeeds == rhs.succeeds))
      return false;
    return true;
  }
  bool operator != (const AppendResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AppendResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const AppendResponse& obj);
};

void swap(AppendResponse &a, AppendResponse &b);

typedef struct _VoteRequest__isset {
  _VoteRequest__isset() : term(false), last_commit_idx(false), peer_id(false) {}
  bool term :1;
  bool last_commit_idx :1;
  bool peer_id :1;
} _VoteRequest__isset;

class VoteRequest {
 public:

  static const char* ascii_fingerprint; // = "6435B39C87AB0E30F30BEDEFD7328C0D";
  static const uint8_t binary_fingerprint[16]; // = {0x64,0x35,0xB3,0x9C,0x87,0xAB,0x0E,0x30,0xF3,0x0B,0xED,0xEF,0xD7,0x32,0x8C,0x0D};

  VoteRequest(const VoteRequest&);
  VoteRequest& operator=(const VoteRequest&);
  VoteRequest() : term(0), last_commit_idx(0), peer_id(0) {
  }

  virtual ~VoteRequest() throw();
  int32_t term;
  int32_t last_commit_idx;
  int32_t peer_id;

  _VoteRequest__isset __isset;

  void __set_term(const int32_t val);

  void __set_last_commit_idx(const int32_t val);

  void __set_peer_id(const int32_t val);

  bool operator == (const VoteRequest & rhs) const
  {
    if (!(term == rhs.term))
      return false;
    if (!(last_commit_idx == rhs.last_commit_idx))
      return false;
    if (!(peer_id == rhs.peer_id))
      return false;
    return true;
  }
  bool operator != (const VoteRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VoteRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VoteRequest& obj);
};

void swap(VoteRequest &a, VoteRequest &b);

typedef struct _VoteResponse__isset {
  _VoteResponse__isset() : term(false), granted(false) {}
  bool term :1;
  bool granted :1;
} _VoteResponse__isset;

class VoteResponse {
 public:

  static const char* ascii_fingerprint; // = "4DC0C1A1F380340B40244ADC7FB0BA60";
  static const uint8_t binary_fingerprint[16]; // = {0x4D,0xC0,0xC1,0xA1,0xF3,0x80,0x34,0x0B,0x40,0x24,0x4A,0xDC,0x7F,0xB0,0xBA,0x60};

  VoteResponse(const VoteResponse&);
  VoteResponse& operator=(const VoteResponse&);
  VoteResponse() : term(0), granted(0) {
  }

  virtual ~VoteResponse() throw();
  int32_t term;
  bool granted;

  _VoteResponse__isset __isset;

  void __set_term(const int32_t val);

  void __set_granted(const bool val);

  bool operator == (const VoteResponse & rhs) const
  {
    if (!(term == rhs.term))
      return false;
    if (!(granted == rhs.granted))
      return false;
    return true;
  }
  bool operator != (const VoteResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VoteResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VoteResponse& obj);
};

void swap(VoteResponse &a, VoteResponse &b);

} // namespace

#endif
